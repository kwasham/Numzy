version: "3.9"

services:
  # NOTE: Local PostgreSQL service removed (2025-08-28) to enforce exclusive Neon usage.
  # If you need a local Postgres again, reintroduce a service named `postgres` in a feature branch.

  # Shared infrastructure (profile: infra)
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
    profiles: ["infra", "app"]

  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin
    volumes:
      - minio_data:/data
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 3s
      retries: 5
    profiles: ["infra", "app"]

  # Backend API (profile: app)
  api:
    build:
      context: ./backend
    command: sh -c "python -c 'import asyncio; from app.core.database import init_db; asyncio.run(init_db())' && uvicorn app.api.main:app --host 0.0.0.0 --port 8000 --reload"
    working_dir: /app
    volumes:
      - ./backend:/app
    ports:
      - "8000:8000"
    env_file:
      - ./backend/.env
      - ./.env
    environment:
      PYTHONPATH: /app
      DEV_AUTH_BYPASS: "false"
      DRAMATIQ_BROKER_URL: redis://redis:6379/0
      REDIS_URL: redis://redis:6379/0
      # Neon URL must be provided via .env (ALEMBIC_DATABASE_URL and/or DATABASE_URL / DATABASE_AUTHENTICATED_URL)
      # Removal of local Postgres fallback is intentional to prevent drift.
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET_NAME: receipts
      STORAGE_BACKEND: minio
    depends_on:
      - redis
      - minio
    profiles: ["app"]

  # MCP prompt server (profile: app)
  mcp:
    build:
      context: ./backend
    command: python app/mcp/prompt_server.py
    working_dir: /app
    env_file:
      - ./backend/.env
      - ./.env
    environment:
      DEV_AUTH_BYPASS: "false"
    ports:
      - "8002:8000"
    profiles: ["app"]

  # Dramatiq worker (profile: app)
  worker:
    build:
      context: ./backend
    command: sh -c "sleep 5 && dramatiq app.core.tasks --processes 1 --threads 4"
    working_dir: /app
    volumes:
      - ./backend:/app
    env_file:
      - ./backend/.env
      - ./.env
    environment:
      PYTHONPATH: /app
      DRAMATIQ_BROKER_URL: redis://redis:6379/0
      REDIS_URL: redis://redis:6379/0
      MINIO_ENDPOINT: minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin
      MINIO_BUCKET_NAME: receipts
      STORAGE_BACKEND: minio
      DEV_AUTH_BYPASS: "false"
      # Intentionally no local fallback; Neon variables required.
    depends_on:
      - api
      - redis
      - minio
    profiles: ["app"]

  # Optional: Frontend in Docker (use profile: frontend)
  # frontend:
  #   image: node:20-alpine
  #   working_dir: /app
  #   volumes:
  #     - ./frontend:/app
  #   command: sh -c "corepack enable && pnpm install && pnpm dev"
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - NEXT_TELEMETRY_DISABLED=1
  #   profiles: ["frontend"]

volumes:
  redis_data:
  minio_data:
